[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm"]
build-backend = "setuptools.build_meta"

[project]
name = "vita-panel-testing"
version = "0.1.0"
description = "VITA: Virtual Interactive Teaching Assistant - Python learning platform"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "VITA Development Team", email = "team@vita.edu"},
]
keywords = ["education", "python", "teaching", "panel", "interactive"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Education",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "ag2==0.9.3",
    "annotated-types==0.7.0",
    "anyio==4.9.0",
    "asyncer==0.0.8",
    "Authlib==1.6.0",
    "bleach==6.2.0",
    "bokeh==3.7.3",
    "certifi>=2025.6.15",
    "cffi==1.17.1",
    "charset-normalizer==3.4.2",
    "colorama==0.4.6",
    "contourpy==1.3.2",
    "cryptography>=45.0.4",
    "diskcache==5.6.3",
    "distro==1.9.0",
    "docker==7.1.0",
    "h11==0.16.0",
    "httpcore==1.0.9",
    "httpx==0.28.1",
    "idna==3.10",
    "Jinja2>=3.1.6",
    "jiter==0.10.0",
    "linkify-it-py==2.0.3",
    "Markdown==3.8.2",
    "markdown-it-py==3.0.0",
    "MarkupSafe>=3.0.2",
    "mdit-py-plugins==0.4.2",
    "mdurl==0.1.2",
    "narwhals==1.44.0",
    "numpy>=2.3.1",
    "packaging>=25.0",
    "pandas>=2.3.0",
    "panel>=1.7.1",
    "param>=2.2.1",
    "pillow>=11.2.1",
    "pycparser==2.22",
    "pydantic>=2.11.7",
    "pydantic_core>=2.33.2",
    "python-dateutil>=2.9.0.post0",
    "python-dotenv>=1.1.1",
    "pytz>=2025.2",
    "pyviz_comms>=3.0.6",
    "PyYAML>=6.0.2",
    "regex>=2024.11.6",
    "requests>=2.32.4",
    "six>=1.17.0",
    "sniffio>=1.3.1",
    "sseclient>=0.0.27",
    "termcolor>=3.1.0",
    "tiktoken>=0.9.0",
    "tornado>=6.5.1",
    "tqdm>=4.67.1",
    "typing-inspection>=0.4.1",
    "typing_extensions>=4.14.0",
    "tzdata>=2025.2",
    "uc-micro-py>=1.0.3",
    "urllib3>=2.5.0",
    "webencodings>=0.5.1",
    "xyzservices>=2025.4.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-asyncio>=0.21.0",
    "coverage[toml]>=7.3.0",
    
    # Code Quality
    "black>=23.9.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "flake8-docstrings>=1.7.0",
    "flake8-bugbear>=23.9.0",
    "flake8-comprehensions>=3.14.0",
    "flake8-simplify>=0.21.0",
    "mypy>=1.6.0",
    "types-requests>=2.31.0",
    "types-PyYAML>=6.0.12",
    
    # Development Tools
    "pre-commit>=3.4.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
    "pip-audit>=2.6.0",
    
    # Documentation
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]

[project.urls]
Homepage = "https://github.com/milsteam4144/vita_panel_testing"
Documentation = "https://vita-panel-testing.readthedocs.io/"
Repository = "https://github.com/milsteam4144/vita_panel_testing.git"
"Bug Tracker" = "https://github.com/milsteam4144/vita_panel_testing/issues"

[project.scripts]
vita = "vita.main:main"

# Black configuration
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | vita_venv
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests"]

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "panel.*",
    "param.*",
    "bokeh.*",
    "ag2.*",
    "sseclient.*",
    "tiktoken.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "*/tests/*",
    "*/test_*.py",
    "*/*_test.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Bandit security linter configuration
[tool.bandit]
exclude_dirs = ["tests", "vita_venv"]
skips = ["B101"]  # Skip assert_used test

# setuptools configuration for package discovery
[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
vita = ["user_interface/*", "py.typed"]